import random
import time
import sys
from collections import deque
import copy

sys.setrecursionlimit(10**5)


randomlist = random.choices(range(-999999, 999999), k=16777216)
#print(randomlist)

c = copy.deepcopy(randomlist)
print(f"For 1024 elements in a range from 0 to 999999*2: \n")



start_time = time.time()

# Bubble
def bubbles(x):
    for i in range(len(x) - 1):
        sorted = True  # Set sorted flag initially to True
        for j in range(len(x) - i - 1):
            if x[j] > x[j + 1]:
                x[j], x[j+1] = x[j+1], x[j]
                sorted = False  # Set sorted flag to False if any swap occurs
        if sorted:  # If no swaps occurred in a pass, the list is sorted
            break

    return x


#print(randomlist)
#print(bubbles(c))

bubbles(c)

print ("time elapsed for bubble sort: {:.10f}s".format(time.time() - start_time))
c = copy.deepcopy(randomlist)



# Insertion
start_time = time.time()
def insertion(x):
    for i in range(1, len(x)):

        j = x[i]
        key = i - 1
        while key >= 0 and j < x[key]:
            x[key + 1] = x[key]
            key -= 1
        x[key + 1] = j

    return x


#print(randomlist)
#print(insertion(c))

insertion(c)
c = copy.deepcopy(randomlist)

print ("time elapsed for insertion sort: {:.10f}s".format(time.time() - start_time))


# Selection
start_time = time.time()

def selection(x):
    for i in range(len(x)):

        index_min = i
        for j in range(i + 1, len(x)):
            if x[index_min] > x[j]:
                index_min = j

        x[i], x[index_min] = x[index_min], x[i]
    return x


#print(randomlist)
#print(selection(c))
selection(c)
c = copy.deepcopy(randomlist)

print ("time elapsed for selection sort: {:.10f}s".format(time.time() - start_time))





# Quick
start_time = time.time()

def qsort(arr):
    if len(arr) <= 1:
        return arr
    else:
        return qsort([x for x in arr[1:] if x < arr[0]]) + [arr[0]] + qsort([x for x in arr[1:] if x >= arr[0]])

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    lt = deque()
    ge = deque()
    e0 = arr.popleft()
    for e in arr:
        if e < e0:
            lt.append(e)
        else:
            ge.append(e)
    return quick_sort(lt) + deque([e0]) + quick_sort(ge)

def quick_sort_helper(arr):
    return quick_sort(deque(arr))

# Generate a list of 100 random elements from the range -999999 to 999999


# Call the sorting function with the generated list
sorted_elements = quick_sort_helper(c)
c = copy.deepcopy(randomlist)


#print(randomlist)
#print(sorted_elements)

print ("time elapsed for quick sort: {:.10f}s".format(time.time() - start_time))



# Merge
start_time = time.time()

def merge(x):
    if len(x) > 1:
        mid = len(x) // 2
        left = x[:mid]
        right = x[mid:]

        merge(left)
        merge(right)
        i_left = 0
        i_right = 0
        i = 0

        while i_left < len(left) and i_right < len(right):
            if left[i_left] <= right[i_right]:
                x[i] = left[i_left]
                i_left += 1
            else:
                x[i] = right[i_right]
                i_right += 1
            i += 1

        while i_left < len(left):
            x[i] = left[i_left]
            i_left += 1
            i += 1

        while i_right < len(right):
            x[i] = right[i_right]
            i_right += 1
            i += 1

merge(c)

#print(randomlist)
#print(c)

c = copy.deepcopy(randomlist)
print ("time elapsed for merge sort: {:.10f}s".format(time.time() - start_time))




# Radix sort

start_time = time.time()
def countingSort(x, exp1):
    n = len(x)
    output = [0] * n
    count = [0] * 10

    for i in range(0, n):
        count[(x[i] // exp1) % 10] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        output[count[(x[i] // exp1) % 10] - 1] = x[i]
        count[(x[i] // exp1) % 10] -= 1
        i -= 1

    i = 0
    for i in range(0, len(x)):
        x[i] = output[i]


def radixSort(x):
    maximum = max(x)

    exp = 1
    while maximum / exp >= 1:
        countingSort(x, exp)
        exp *= 10


#print(randomlist)
radixSort(c)
#print(c)

c = copy.deepcopy(randomlist)

print ("time elapsed for radix sort: {:.10f}s".format(time.time() - start_time))



# Counting
start_time = time.time()
def counting(x):
    m = max(x)

    count = [0] * (m + 1)
    for i in x:
        count[i] += 1

    for i in range(1, m + 1):
        count[i] += count[i - 1]

    final = [0] * len(x)

    for i in range(len(x) - 1, -1, -1):
        final[count[x[i]] - 1] = x[i]
        count[x[i]] -= 1

    return final


#print(randomlist)
#print(counting(c))

counting(c)
c = copy.deepcopy(randomlist)

print ("time elapsed for counting sort: {:.10f}s".format(time.time() - start_time))



start_time = time.time()




# Shell Sort

def shellSort(arr, n):
    gap = n // 2

    while gap > 0:
        j = gap
        while j < n:
            i = j - gap
            while i >= 0:
                if arr[i + gap] > arr[i]:
                    break
                else:
                    arr[i + gap], arr[i] = arr[i], arr[i + gap]
                i = i - gap
            j += 1
        gap = gap // 2


#print(randomlist)
shellSort(c, len(randomlist))
#print(c)

print ("time elapsed for shell sort: {:.10f}s".format(time.time() - start_time))



# Bitonic

start_time = time.time()


def compare(x, i, j, direction):
    if (direction == 1 and x[i] > x[j]) or (direction == 0 and x[i] < x[j]):
        x[i], x[j] = x[j], x[i]


def merge(x, low, nr, direction):
    if nr > 1:
        k = nr // 2
        for i in range(low, low + k):
            compare(x, i, i + k, direction)
        merge(x, low, k, direction)
        merge(x, low + k, k, direction)


def bitonic(x, low, nr, direction):
    if nr > 1:
        k = nr // 2
        bitonic(x, low, k, 1)
        bitonic(x, low + k, k, 0)
        merge(x, low, nr, direction)

def sort(x, nr, asc):
    bitonic(x, 0, nr, asc)

# ascending order = 1
asc = 1
sort(c, len(c), asc)


#print(randomlist)
#print(c)
c = copy.deepcopy(randomlist)
print ("time elapsed for bitonic sort: {:.10f}s".format(time.time() - start_time))




# HeapSort

start_time = time.time()

def heapify(arr, n, i):
    largest = i  # Initialize largest as root
    l = 2 * i + 1  # left = 2*i + 1
    r = 2 * i + 2  # right = 2*i + 2

    # See if left child of root exists and is
    # greater than root

    if l < n and arr[i] < arr[l]:
        largest = l

    # See if right child of root exists and is
    # greater than root

    if r < n and arr[largest] < arr[r]:
        largest = r

    # Change root, if needed

    if largest != i:
        (arr[i], arr[largest]) = (arr[largest], arr[i])  # swap

        # Heapify the root.

        heapify(arr, n, largest)


# The main function to sort an array of given size

def heapSort(arr):
    n = len(arr)

    # Build a maxheap.
    # Since last parent will be at (n//2) we can start at that location.

    for i in range(n // 2, -1, -1):
        heapify(arr, n, i)

    # One by one extract elements

    for i in range(n - 1, 0, -1):
        (arr[i], arr[0]) = (arr[0], arr[i])  # swap
        heapify(arr, i, 0)


# Driver code to test above

heapSort(c)
n = len(c)

#print(randomlist)
#print(c)
c = copy.deepcopy(randomlist)

print ("time elapsed for heap sort: {:.10f}s".format(time.time() - start_time))





# IntroSort

start_time = time.time()


def introsort(alist):
    maxdepth = (len(alist).bit_length() - 1) * 2
    introsort_helper(alist, 0, len(alist), maxdepth)


def introsort_helper(alist, start, end, maxdepth):
    if end - start <= 1:
        return
    elif maxdepth == 0:
        heapsort(alist, start, end)
    else:
        p = partition(alist, start, end)
        introsort_helper(alist, start, p + 1, maxdepth - 1)
        introsort_helper(alist, p + 1, end, maxdepth - 1)


def partition(alist, start, end):
    pivot = alist[start]
    i = start - 1
    j = end

    while True:
        i = i + 1
        while alist[i] < pivot:
            i = i + 1
        j = j - 1
        while alist[j] > pivot:
            j = j - 1

        if i >= j:
            return j

        swap(alist, i, j)


def swap(alist, i, j):
    alist[i], alist[j] = alist[j], alist[i]


def heapsort(alist, start, end):
    build_max_heap(alist, start, end)
    for i in range(end - 1, start, -1):
        swap(alist, start, i)
        max_heapify(alist, index=0, start=start, end=i)


def build_max_heap(alist, start, end):
    def parent(i):
        return (i - 1) // 2

    length = end - start
    index = parent(length - 1)
    while index >= 0:
        max_heapify(alist, index, start, end)
        index = index - 1


def max_heapify(alist, index, start, end):
    def left(i):
        return 2 * i + 1

    def right(i):
        return 2 * i + 2

    size = end - start
    l = left(index)
    r = right(index)
    if (l < size and alist[start + l] > alist[start + index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[start + r] > alist[start + largest]):
        largest = r
    if largest != index:
        swap(alist, start + largest, start + index)
        max_heapify(alist, largest, start, end)


introsort(c)

#print(randomlist)
#print(c)
c = copy.deepcopy(randomlist)


print ("time elapsed for intro sort: {:.10f}s".format(time.time() - start_time))